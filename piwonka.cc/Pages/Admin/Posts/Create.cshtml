@page
@model Piwonka.CC.Pages.Admin.Posts.CreateModel
@{
    ViewData["Title"] = "Neuen Post erstellen";
}

<div class="row mb-4">
    <div class="col">
        <h1>Neuen Post erstellen</h1>
    </div>
</div>

<div class="row">
    <div class="col-lg-8">
        <form method="post" enctype="multipart/form-data" id="createBlogForm">
            <div asp-validation-summary="ModelOnly" class="text-danger mb-3"></div>

            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">Grundinformationen</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label asp-for="Post.Titel" class="form-label">Titel *</label>
                        <input asp-for="Post.Titel" class="form-control" placeholder="Geben Sie den Titel ein..." />
                        <span asp-validation-for="Post.Titel" class="text-danger"></span>
                    </div>

                    <div class="mb-3">
                        <label asp-for="Post.Slug" class="form-label">URL-Slug</label>
                        <input asp-for="Post.Slug" class="form-control" placeholder="url-freundlicher-titel (wird automatisch generiert)" />
                        <div class="form-text">Lassen Sie leer für automatische Generierung aus dem Titel</div>
                        <span asp-validation-for="Post.Slug" class="text-danger"></span>
                    </div>

                    <div class="mb-3">
                        <label asp-for="Post.Excerpt" class="form-label">Kurzbeschreibung *</label>
                        <textarea asp-for="Post.Excerpt" class="form-control" rows="3" placeholder="Kurze Zusammenfassung des Posts..."></textarea>
                        <span asp-validation-for="Post.Excerpt" class="text-danger"></span>
                    </div>

                    <div class="row">
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="Post.Kategorie" class="form-label">Kategorie</label>
                                <select asp-for="Post.Kategorie" class="form-select" asp-items="Model.KategorieOptions">
                                    <option value="">-- Keine Kategorie --</option>
                                </select>
                            </div>
                        </div>
                        <div class="col-md-6">
                            <div class="mb-3">
                                <label asp-for="Post.Language" class="form-label">Sprache</label>
                                <select asp-for="Post.Language" class="form-select" asp-items="Model.LanguageOptions">
                                </select>
                            </div>
                        </div>
                    </div>
                </div>
            </div>

            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">Inhalt</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label asp-for="Post.Inhalt" class="form-label">Inhalt *</label>
                        <span asp-validation-for="Post.Inhalt" class="text-danger"></span>

                        <!-- KRITISCHER FIX: Direkte TinyMCE Implementation statt Partial -->
                        <textarea id="Post_Inhalt" name="Post.Inhalt" rows="15" class="form-control">@Html.Raw(Model.Post?.Inhalt)</textarea>
                    </div>
                </div>
            </div>

            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">Bild & Medien</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label asp-for="Post.BildUrl" class="form-label">Bild URL</label>
                        <input asp-for="Post.BildUrl" class="form-control" placeholder="https://example.com/image.jpg" />
                        <span asp-validation-for="Post.BildUrl" class="text-danger"></span>
                    </div>

                    <div class="mb-3">
                        <label asp-for="Post.UploadedImage" class="form-label">Oder Bild hochladen</label>
                        <input asp-for="Post.UploadedImage" type="file" class="form-control" accept="image/*" />
                        <div class="form-text">Akzeptierte Formate: JPG, PNG, GIF</div>
                    </div>
                </div>
            </div>

            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">SEO & Meta</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label asp-for="Post.MetaDescription" class="form-label">Meta Description</label>
                        <textarea asp-for="Post.MetaDescription" class="form-control" rows="2" placeholder="Beschreibung für Suchmaschinen..." maxlength="500"></textarea>
                        <span asp-validation-for="Post.MetaDescription" class="text-danger"></span>
                        <div class="form-text">Empfohlen: 150-160 Zeichen</div>
                    </div>

                    <div class="mb-3">
                        <label asp-for="Post.MetaKeywords" class="form-label">Meta Keywords</label>
                        <input asp-for="Post.MetaKeywords" class="form-control" placeholder="keyword1, keyword2, keyword3" />
                        <span asp-validation-for="Post.MetaKeywords" class="text-danger"></span>
                        <div class="form-text">Komma-getrennte Keywords</div>
                    </div>
                </div>
            </div>

            <div class="card mb-4">
                <div class="card-header">
                    <h5 class="mb-0">Veröffentlichung</h5>
                </div>
                <div class="card-body">
                    <div class="mb-3 form-check">
                        <input asp-for="Post.IstVeroeffentlicht" class="form-check-input" />
                        <label asp-for="Post.IstVeroeffentlicht" class="form-check-label">Sofort veröffentlichen</label>
                        <div class="form-text">Wenn nicht aktiviert, wird der Post als Entwurf gespeichert</div>
                    </div>
                </div>
            </div>

            <div class="mb-3">
                <a asp-page="./Index" class="btn btn-secondary">
                    <i class="bi bi-arrow-left"></i> Abbrechen
                </a>
                <button type="button" class="btn btn-primary" onclick="saveBlogPost()">
                    <i class="bi bi-check-lg"></i> Post erstellen
                </button>
            </div>
        </form>
    </div>

    <div class="col-lg-4">
        <div class="card">
            <div class="card-header">
                <h6 class="mb-0">Hilfe</h6>
            </div>
            <div class="card-body">
                <h6>Titel</h6>
                <p class="small">Ein aussagekräftiger Titel für Ihren Post.</p>

                <h6>Slug</h6>
                <p class="small">URL-freundliche Version des Titels. Wird automatisch generiert, falls leer.</p>

                <h6>Excerpt</h6>
                <p class="small">Kurze Zusammenfassung, die in der Post-Übersicht angezeigt wird.</p>

                <h6>Meta Description</h6>
                <p class="small">Beschreibung für Suchmaschinen. Wichtig für SEO.</p>
            </div>
        </div>
    </div>
</div>

@section Scripts {
    @{
        await Html.RenderPartialAsync("_ValidationScriptsPartial");
    }

    <script>
        let blogEditorInitialized = false;

        document.addEventListener('DOMContentLoaded', function() {
            initBlogEditor();
            setupBlogSlugGeneration();
        });

        function initBlogEditor() {
            if (typeof tinymce === 'undefined') {
                setTimeout(initBlogEditor, 100);
                return;
            }

            if (blogEditorInitialized) {
                return;
            }

            console.log('Initialisiere TinyMCE für Blog-Inhalt...');

            tinymce.init({
                selector: '#Post_Inhalt',
                height: 500,
                plugins: 'preview importcss searchreplace autolink autosave save directionality code visualblocks visualchars fullscreen image link media template codesample table charmap pagebreak nonbreaking anchor insertdatetime advlist lists wordcount help charmap quickbars emoticons',
                menubar: 'file edit view insert format tools table help',
                toolbar: 'undo redo | bold italic underline strikethrough | fontfamily fontsize blocks | alignleft aligncenter alignright alignjustify | outdent indent |  numlist bullist | forecolor backcolor removeformat | pagebreak | charmap emoticons | fullscreen  preview save print | insertfile image media template link anchor codesample | ltr rtl',
                toolbar_sticky: true,
                entity_encoding: 'raw',

                init_instance_callback: function(editor) {
                    console.log('Blog-Editor initialisiert:', editor.id);
                    blogEditorInitialized = true;
                },

                setup: function(editor) {
                    // KRITISCH: Content bei jeder Änderung synchronisieren
                    editor.on('Change KeyUp Paste NodeChange', function() {
                        var content = editor.getContent();
                        var textarea = document.getElementById('Post_Inhalt');
                        if (textarea) {
                            textarea.value = content;
                            console.log('Blog Content synchronisiert');
                        }
                    });

                    // WICHTIG: Auch bei Blur synchronisieren
                    editor.on('blur', function() {
                        var content = editor.getContent();
                        var textarea = document.getElementById('Post_Inhalt');
                        if (textarea) {
                            textarea.value = content;
                        }
                    });
                }
            });
        }

        function setupBlogSlugGeneration() {
            const titelInput = document.getElementById('Post_Titel');
            const slugInput = document.getElementById('Post_Slug');

            if (titelInput && slugInput) {
                titelInput.addEventListener('input', function() {
                    if (slugInput.value === '') {
                        const slug = generateSlug(this.value);
                        slugInput.value = slug;
                    }
                });
            }
        }

        function generateSlug(text) {
            return text.toLowerCase()
                .replace(/ä/g, 'ae')
                .replace(/ö/g, 'oe')
                .replace(/ü/g, 'ue')
                .replace(/ß/g, 'ss')
                .replace(/[^a-z0-9\s-]/g, '')
                .replace(/\s+/g, '-')
                .replace(/-+/g, '-')
                .trim('-');
        }

        function saveBlogPost() {
            console.log('saveBlogPost() aufgerufen');

            // TinyMCE-Inhalt explizit speichern - MEHRERE METHODEN
            var editor = tinymce.get('Post_Inhalt');
            if (editor) {
                // Methode 1: getContent() und direkt setzen
                var content = editor.getContent();
                var textarea = document.getElementById('Post_Inhalt');
                if (textarea) {
                    textarea.value = content;
                    console.log('Blog-Inhalt gesetzt:', content.substring(0, 100) + '...');
                }

                // Methode 2: TinyMCE save() triggern
                editor.save();
                console.log('TinyMCE save() getriggert');

                // Methode 3: triggerSave() für alle Editoren
                tinymce.triggerSave();
                console.log('TinyMCE triggerSave() ausgeführt');
            } else {
                console.warn('TinyMCE Editor für Post_Inhalt nicht gefunden!');
            }

            // ZUSÄTZLICHER FIX: Kurz warten und dann Form absenden
            setTimeout(function() {
                document.getElementById('createBlogForm').submit();
            }, 100); // 100ms Verzögerung für Synchronisation
        }

        // FORM SUBMIT EVENT ABFANGEN - UNIVERSELLER FIX
        document.addEventListener('DOMContentLoaded', function() {
            var form = document.getElementById('createBlogForm');
            if (form) {
                form.addEventListener('submit', function(e) {
                    console.log('Form Submit abgefangen - TinyMCE Sync...');

                    // Alle TinyMCE Editoren synchronisieren
                    if (typeof tinymce !== 'undefined') {
                        tinymce.triggerSave();

                        // Editor einzeln prüfen
                        var editor = tinymce.get('Post_Inhalt');
                        if (editor) {
                            var content = editor.getContent();
                            var textarea = document.getElementById('Post_Inhalt');
                            if (textarea && content) {
                                textarea.value = content;
                                console.log('Form Submit: Editor synchronisiert');
                            }
                        }
                    }
                });
            }
        });
    </script>
}