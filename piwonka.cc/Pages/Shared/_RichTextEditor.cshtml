@model string
@{
    var fieldId = ViewData["FieldId"] as string ?? "Inhalt";
    var fieldName = ViewData["FieldName"] as string ?? fieldId;
}

<textarea id="@fieldId" name="@fieldName" class="rich-text-editor" rows="15">@Html.Raw(Model)</textarea>

<script>
    document.addEventListener('DOMContentLoaded', function() {
        // TinyMCE initialisieren
        tinymce.init({
            selector: '#@(fieldId)',
            plugins: 'preview importcss searchreplace autolink autosave save directionality code visualblocks visualchars fullscreen image link media template codesample table charmap pagebreak nonbreaking anchor insertdatetime advlist lists wordcount help charmap quickbars emoticons',
            menubar: 'file edit view insert format tools table help',
            toolbar: 'undo redo | bold italic underline strikethrough | fontfamily fontsize blocks | alignleft aligncenter alignright alignjustify | outdent indent | numlist bullist | forecolor backcolor removeformat | pagebreak | charmap emoticons | fullscreen preview save print | insertfile image media template link anchor codesample | ltr rtl',
            toolbar_sticky: true,
            codesample_languages: [
                { text: 'HTML/XML', value: 'markup' },
                { text: 'JavaScript', value: 'javascript' },
                { text: 'CSS', value: 'css' },
                { text: 'C#', value: 'csharp' },
                { text: 'PHP', value: 'php' },
                { text: 'Python', value: 'python' },
                { text: 'SQL', value: 'sql' }
            ],
            codesample_global_prismjs: true,
            image_advtab: true,
            height: 400,
            quickbars_selection_toolbar: 'bold italic | quicklink h2 h3 blockquote quickimage quicktable',
            noneditable_class: 'mceNonEditable',
            toolbar_mode: 'sliding',
            contextmenu: 'link image table',
            content_style: 'body { font-family:Helvetica,Arial,sans-serif; font-size:16px }',
            relative_urls: false,
            remove_script_host: false,
            convert_urls: true,
            entity_encoding: 'raw',
            encoding: 'utf-8',

            // WICHTIG: Setup für das korrekte Laden und Speichern
            setup: function(editor) {
                // Content beim Laden setzen
                editor.on('init', function() {
                    var textarea = document.getElementById('@fieldId');
                    if (textarea && textarea.value) {
                        editor.setContent(textarea.value);
                    }
                });

                // KRITISCH: Content vor Form-Submit synchronisieren
                editor.on('change', function() {
                    editor.save(); // Synchronisiert Editor mit Textarea
                });

                editor.on('blur', function() {
                    editor.save(); // Auch bei Focus-Verlust
                });
            }
        });

        // ZUSÄTZLICHER FIX: Form Submit Event abfangen
        const form = document.querySelector('form');
        if (form) {
            form.addEventListener('submit', function(e) {
                // Alle TinyMCE Editoren vor Submit speichern
                tinymce.triggerSave();

                // Debug: Prüfen ob Content da ist
                const textarea = document.getElementById('@fieldId');
                console.log('Form Submit - Textarea Content:', textarea.value);

                // Falls immer noch leer, explizit setzen
                if (!textarea.value || textarea.value.trim() === '') {
                    const editor = tinymce.get('@fieldId');
                    if (editor) {
                        textarea.value = editor.getContent();
                        console.log('Manually set content:', textarea.value);
                    }
                }
            });
        }
    });
</script>